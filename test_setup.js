// TODO - Make a common CSS file
// TODO - Create debug mode with steps
// TODO - Make debug views pretty
// TODO - Implement sound
// TODO - Make debug view for keyboard


var MEM_DIGIT_SPRITES = [
	0xf0, 0x90, 0x90, 0x90, 0xf0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xf0, 0x10, 0xf0, 0x80, 0xf0, // 2
	0xf0, 0x10, 0xf0, 0x10, 0xf0, // 3
	0x90, 0x90, 0xf0, 0x10, 0x10, // 4
	0xf0, 0x80, 0xf0, 0x10, 0xf0, // 5
	0xf0, 0x80, 0xf0, 0x90, 0xf0, // 6
	0xf0, 0x10, 0x20, 0x40, 0x40, // 7
	0xf0, 0x90, 0xf0, 0x90, 0xf0, // 8
	0xf0, 0x90, 0xf0, 0x10, 0xf0, // 9
	0xf0, 0x90, 0xf0, 0x90, 0x90, // A
	0xe0, 0x90, 0xe0, 0x90, 0xe0, // B
	0xf0, 0x80, 0x80, 0x80, 0xf0, // C
	0xe0, 0x90, 0x90, 0x90, 0xe0, // D
	0xf0, 0x80, 0xf0, 0x80, 0xf0, // E
	0xf0, 0x80, 0xf0, 0x80, 0x80 // F
]; // Length = 80 bytes


var MEM_TEST_1 = [
	0x10, 0x02, 0x10, 0x08, // 0x000 = JP 0x002, 0x002 = JP 0x008
	0x00, 0x00, 0x00, 0x00,
	0x60, 0x04, 0x71, 0x01,	// 0x008 = LD V0 0x04, 0x00a = ADD V1 0x01
	0x50, 0x10, 0x10, 0x00, // 0x00c = SE V0 V1, 0x00e = JP 0x000
	0x62, 0xde, 0x63, 0xad,
	0x64, 0xbe, 0x65, 0xef,
	0x61, 0x00, 0x10, 0x00
];

var MEM_TEST_2 = [
	0x20, 0x04, 0x61, 0x69,
	0x60, 0x04, 0x00, 0xee 
];

var MEM_TEST_DRW = [
	0x20, 0x08, 0x62, 0xaa, // CALL 0x008, LD V2 0xaa
	0xff, 0x81, 0x81, 0xff, // Sprite[4] @0x004
	0xa0, 0x04, 0x60, 0x3f, // LD VI 0x004, LD V0 0x3f (63),
	0x61, 0x1f, 0xd0, 0x14, // LD V1 0x1f (31), DRW V0 V1 0x4
	0x00, 0xee, 0x00, 0x00 // RET
];

var MEM_DRAW_DIGITS = [
	// Draw digit function
	0x12, 0x08, 0xd0, 0x15, // JP 0x208, DRW V0 V1 0x5
	0x70, 0x08, 0x00, 0xee, // ADD V0 0x08, RET
	0x60, 0x01, 0x61, 0x01, // LD V0 0x01, LD V1 0x01
	0xa0, 0x00, 0x22, 0x02, // LD VI 0x000, CALL 0x202
	0xa0, 0x05, 0x22, 0x02, // LD VI 0x005, CALL 0x202
	0xa0, 0x0a, 0x22, 0x02, // LD VI 0x00a, CALL 0x202
	0xa0, 0x0f, 0x22, 0x02, // LD VI 0x00f, CALL 0x202
	0xa0, 0x14, 0x22, 0x02, // LD VI 0x014, CALL 0x202
	0xa0, 0x19, 0x22, 0x02, // LD VI 0x019, CALL 0x202
	0xa0, 0x1e, 0x22, 0x02, // LD VI 0x01e, CALL 0x202
	0xa0, 0x23, 0x22, 0x02, // LD VI 0x023, CALL 0x202
	0x60, 0x01, 0x61, 0x0a, // LD V0 0x01, LD V1 0x01
	0xa0, 0x28, 0x22, 0x02, // LD VI 0x028, CALL 0x202
	0xa0, 0x2d, 0x22, 0x02, // LD VI 0x02d, CALL 0x202
	0xa0, 0x32, 0x22, 0x02, // LD VI 0x032, CALL 0x202
	0xa0, 0x37, 0x22, 0x02, // LD VI 0x037, CALL 0x202
	0xa0, 0x3c, 0x22, 0x02, // LD VI 0x03c, CALL 0x202
	0xa0, 0x41, 0x22, 0x02, // LD VI 0x041, CALL 0x202
	0xa0, 0x46, 0x22, 0x02, // LD VI 0x046, CALL 0x202
	0xa0, 0x4b, 0x22, 0x02 // LD VI 0x04b, CALL 0x202
];


var MEM_B_ADVENTURE = [
	// FUN setup() 0x200 - Set registers to intial values.
	0x6b, 0x0b, // LD Vb 0x0b
	0x60, 0x00, // LD V0 0x00
	0x61, 0x00, // LD V1 0x00
	0x62, 0x05, // LD V2 0x05 = Set V2 to hold UP key (5)
	0x63, 0x07, // LD V3 0x07 = Set V3 to hold LEFT key (7)
	0x64, 0x08, // LD V4 0x08 = Set V4 to hold DOWN key (8)
	0x65, 0x09, // LD V5 0x09 = Set V5 to hold RIGHT key (9)
	0x12, 0x36, // JP 0x236 = Go to entry point
	// FUN drawB(V0, V1) 0x210 - Draw B at (x, y)
	0xfb, 0x29, // LD F Vb
	0xd0, 0x15, // DRAW V0 V1, 0x5
	0x00, 0xee, // RET
	// FUN moveRight() 0x216 - Increment x postion of B by 1 and redraw
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x70, 0x01, // ADD V0, 0x01
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x00, 0xee, // RET
	// FUN moveLeft() 0x21e - decrement x postion of B by 1 and redraw
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x70, 0xff, // ADD V0, 0xff
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x00, 0xee, // RET
	// FUN moveUp() 0x226 - decrement y postion of B by 1 and redraw
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x71, 0xff, // ADD V1, 0xff
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x00, 0xee, // RET
	// FUN moveDown() 0x22e - increment y postion of B by 1 and redraw
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x71, 0x01, // ADD V1, 0x01
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	0x00, 0xee, // RET
	// Entry point 0x236
	0x22, 0x10, // CALL 0x210 = drawB(V0, V1)
	// Begin loop 0x238
	0xf6, 0x07, // LD V6, DT
	0x36, 0x00, // SE V6, 0x00 = Only check keys and draw if DT == 0x00
	0x12, 0x38, // JP 0x238
	0xe5, 0xa1, // SKNP V5 = Call moveRight() if RIGHT key is pressed
	0x22, 0x16, // CALL 0x216
	0xe3, 0xa1, // SKNP V3 = Call moveLeft() if LEFT key is pressed
	0x22, 0x1e, // CALL 0x21e
	0xe2, 0xa1, // SKNP V2 = Call moveUp() if UP key is pressed
	0x22, 0x26, // CALL 0x226
	0xe4, 0xa1, // SKNP V4 = Call moveDown() if DOWN key is pressed
	0x22, 0x2e, // CALL 0x226
	0x66, 0x02, // LD V6, 0x03 = Set delay timer
	0xf6, 0x15, // LD DT, V6
	0x12, 0x38 // JP 0x238 = Go to beginning of loop.
];


/* B ADVENTURE
	
Registers
	V0 = Bx
	V1 = By
	V2-V5 = Key registers
	V6 = score

Memory
	0xe00-0xe02 = BCD storage
	0xe10-0xe1f = Main function register storage
*/
// TODO - Write at 0x200
var MEM_B_ADVENTURE_2_TEST_CODE = [
	0x2f, 0x00, // TEST DRAW FRAME
	0x2f, 0x3a // TEST DRAW SCORE
];

// 

// TODO - Write at 0xf00
var MEM_B_ADVENTURE_2_DRAW_FUNCTIONS = [
	// 0xf00 - drawFrame()
	// TODO - Store / retrieve main game registers
	0xaf, 0xf7, // LD VI, 0xff7 = Load address of 8px horizontal bar sprite into VI
	0x60, 0x00, // LD V0, 0x00 = Set initial X coordinate of drawing to 0
	// 0xf04 - Begin horizontal loop
	0x61, 0x00, // LD V1, 0x00 = Set Y coordinate of drawing to 0
	0xd0, 0x11, // DRAW V0 V1, 0x1 = Draw segment of horizontal bar at top of screen
	0x61, 0x08, // LD V1, 0x00 = Set Y coordinate of drawing to 8
	0xd0, 0x11, // DRAW V0 V1, 0x1 = Draw segment of horizontal bar below score area
	0x61, 0x1f, // LD V1, 0x1f = Set Y coordinate of drawing to 31
	0xd0, 0x11, // DRAW V0 V1, 0x1 = Draw segment of horizontal bar at bottom of screen
	0x70, 0x08, // ADD V0, 0x8 = Add 8 to X coordinate
	0x30, 0x40, // SE V0, 0x40 = Break loop if X coordinate is 64
	0x1f, 0x04, // JP 0xf04 = Jump to beginning of horizontal loop
	// 0xf16 - End horizontal loop
	0xaf, 0xf3, // LD VI, 0xff3 = Load address of 4px vertical bar sprite into VI
	0x61, 0x00, // LD V1, 0x00 = Set initial Y coordinate of drawing to 0
	// 0xf1a - Begin vertical loop
	0x60, 0x00, // LD V0, 0x00 = Set X coordinate of drawing to 0
	0xd0, 0x14, // DRAW V0 V1, 0x1 = Draw segment of vertical bar at left of screen
	0x60, 0x3f, // LD V0, 0x3f = Set X coordinate of drawing to 63
	0xd0, 0x14, // DRAW V0 V1, 0x1 = Draw segment of vertical bar at right of screen
	0x71, 0x04, // ADD V1, 0x4 = Add 4 to Y coordinate
	0x31, 0x20, // SE V1, 0x20 = Break loop if Y coordinate is 32
	0x1f, 0x1a, // JP 0xf1a = Jump to beginning of vertical loop
	// 0xf28 - End vertical loop
	0xaf, 0xf8, // LD VI, 0xff8 = Load address of 2px corner fill into VI
	0x60, 0x3f, // LD V0, 0x3f = Set X coordintate of drawing to 63
	0x61, 0x00, // LD V1, 0x00 = Set Y coordinate of drawing to 0
	0xd0, 0x11, // DRAW V0, V1, 0x1 = Draw corner fill at top of screen
	0x61, 0x08, // LD V1, 0x08 = Set Y coordinate of drawing to 8
	0xd0, 0x11, // DRAW V0, V1, 0x1 = Draw corner fill below score area
	0x61, 0x1f, // LD V1, 0x1f = Set Y coordinate of drawing to 63
	0xd0, 0x11, // DRAW V0, V1, 0x1 = Draw corner fill at bottom of screen
	0x00, 0xee, // RET = Return from drawFrame()
	// 0xf3a - drawScore()
	0xae, 0x10, // LD VI, 0xe10 = Load address to store main game registers
	0xfe, 0x55, // LD [I], Ve = Store register state at 0xe10
	0xae, 0x00, // LD VI, 0xe00 = Set VI to location of score BCD
	0xf6, 0x33, // LD B, V6 = Store score as BCD at 0xe00-0xe02
	0xf2, 0x65, // LD V2, [i] = Read BCD values into registers V0-V2
	0x68, 0x02, // LD V8, 0x02 = Top align score at Y = 0x02
	0xf0, 0x29, // LD F, V0 = Set VI to location of first digit sprite
	0x67, 0x02, // LD V7, 0x02 = Left align score at X = 0x02
	0xd7, 0x85, // DRAW V7 V8, 0x5 = Draw first digit of score
	0xf1, 0x29, // LD F, V0 = Set VI to location of second digit sprite
	0x67, 0x08, // LD V7, 0x08 = Set X position of second digit to 0x08
	0xd7, 0x85, // DRAW V7 V8, 0x5 = Draw second digit of score
	0xf2, 0x29, // LD F, V0 = Set VI to location of third digit sprite
	0x67, 0x0e, // LD V7, 0x0e = Set X position of third digit to 0x0e
	0xd7, 0x85, // DRAW V7 V8, 0x5 = Draw third digit of score
	0xae, 0x10, // LD VI, 0xe10 = Load address to retrieve main game registers
	0xfe, 0x65, // LD Ve, [I] = Restore registers to previous state
	0x00, 0xee // RET = Return from drawScore()
	
];

// TODO - Write at 0xff0
var MEM_B_ADVENTURE_2_SPRITES = [
	// 0xff0 - Star (3x3)
	0xa0,0x40, 0xa0,
	// 0xff3 - 4px vertical bar
	0x80, 0x80, 0x80, 0x80,
	// 0xff7 - 8px horizontal bar
	0xff,
	// 0xff8 - 2px corner fill
	0xc0
];